# Makefile para gerenciar aplica√ß√£o com m√∫ltiplos microsservi√ßos Docker
# Este arquivo foi projetado para ser multiplataforma (Windows/Linux/macOS).

# NOTA PARA USU√ÅRIOS WINDOWS:
# Se os caracteres com acentos (üöÄ, üõ†Ô∏è) aparecerem quebrados no seu terminal (PowerShell/CMD),
# pode ser um problema de codifica√ß√£o. Salvar este arquivo como "UTF-8" pode resolver.
# Alternativamente, executar 'chcp 65001' no terminal antes de 'make' pode ajudar.

# --- Configura√ß√£o ---

# Nome do projeto. Usado para agrupar todos os cont√™ineres e evitar conflitos.
PROJECT_NAME = orderly

# Para mudar para o comando moderno 'docker compose' (com espa√ßo), altere esta vari√°vel.
# DOCKER_COMPOSE = docker compose
DOCKER_COMPOSE = docker-compose

# Lista de todos os arquivos docker-compose.yaml dos microsservi√ßos.
# Usamos barras normais (/) para garantir a compatibilidade entre sistemas.
COMPOSE_LIST = \
    ./apps/auth-service/docker-compose.yaml \
    ./apps/user-service/docker-compose.yaml \
    ./apps/product-service/docker-compose.yaml \
    ./apps/stock-service/docker-compose.yaml \
    ./apps/order-service/docker-compose.yaml \
    ./apps/payment-service/docker-compose.yaml \
    ./apps/order-receiver-producer/docker-compose.yaml

# Gera automaticamente as flags -f para cada arquivo da lista.
# Exemplo: -f ./apps/auth-service/docker-compose.yaml -f ./apps/user-service/docker-compose.yaml ...
COMPOSE_FILES = $(addprefix -f ,$(COMPOSE_LIST))

# --- Comandos Principais ---

# Comando padr√£o (executado se voc√™ apenas digitar 'make')
all: up

# Inicia todos os servi√ßos em modo detached (em segundo plano).
up:
	@echo "üöÄ Iniciando todos os servi√ßos para o projeto '$(PROJECT_NAME)'..."
	$(DOCKER_COMPOSE) -p $(PROJECT_NAME) $(COMPOSE_FILES) up -d

# Constr√≥i (ou reconstr√≥i) as imagens e inicia todos os servi√ßos.
build:
	@echo "üõ†Ô∏è  Construindo imagens e iniciando todos os servi√ßos para o projeto '$(PROJECT_NAME)'..."
	$(DOCKER_COMPOSE) -p $(PROJECT_NAME) $(COMPOSE_FILES) up -d --build

# Para e remove todos os cont√™ineres, volumes e redes do projeto.
clean:
	@echo "üßπ Parando e limpando todos os cont√™ineres, volumes e redes do projeto '$(PROJECT_NAME)'..."
	$(DOCKER_COMPOSE) -p $(PROJECT_NAME) $(COMPOSE_FILES) down --volumes --remove-orphans

# Apenas para todos os servi√ßos do projeto.
down:
	@echo "üõë Parando todos os servi√ßos do projeto '$(PROJECT_NAME)'..."
	$(DOCKER_COMPOSE) -p $(PROJECT_NAME) $(COMPOSE_FILES) down

# Lista os cont√™ineres em execu√ß√£o do projeto.
ps:
	@echo "üìã Listando cont√™ineres do projeto '$(PROJECT_NAME)'..."
	$(DOCKER_COMPOSE) -p $(PROJECT_NAME) $(COMPOSE_FILES) ps

# Exibe os logs de todos os servi√ßos do projeto.
logs:
	@echo "üìú Exibindo logs do projeto '$(PROJECT_NAME)'... (Pressione Ctrl+C para sair)"
	$(DOCKER_COMPOSE) -p $(PROJECT_NAME) $(COMPOSE_FILES) logs -f

# --- Metas Auxiliares ---

# Declara que os alvos n√£o s√£o arquivos, evitando conflitos.
.PHONY: all up build clean down ps logs help

# Exibe uma mensagem de ajuda com os comandos dispon√≠veis.
help:
	@echo "Comandos dispon√≠veis:"
	@echo "  make up      - Inicia todos os servi√ßos em segundo plano."
	@echo "  make build   - Reconstr√≥i as imagens e inicia os servi√ßos."
	@echo "  make down    - Para todos os servi√ßos."
	@echo "  make clean   - Para e remove cont√™ineres, volumes e redes."
	@echo "  make ps      - Lista os cont√™ineres em execu√ß√£o."
	@echo "  make logs    - Exibe os logs de todos os servi√ßos."

